In Delay-Time Chat

//Looking for some advice on this. I distinguished the operators into 3 kinds

//1) Binary operators - requires operand on both lhs and rhs
//2) Unary operators - requires operand on only the right side
//3) Unary number modifier - ie. Pi and percentage. Can either be rhs or lhs.

//   I didn't really spot your "Pi" and "%" signs in your code. You could easily
//   write a string literal function for these, displaying "Pi" and "%" on the
//   interface while in the background you have _Pi or _Per (percent).

//Is that all that's needed? I'm not sure what EXP, Ans, e, Inv, x! and ln mean though on the Google scientific calculator.
//Also it seems tan, cos and sin functions are giving incorrect answers, at least when I compare to the calculator.

//   How inaccurate? Give some example numbers. I know that some calculators may be more precise than compiler
//   implementation for the console.
//Explanations:
//   -EXP: Probably means exponent as in the next number you punch in will become the prior's exponent. Don't
//      really know how accurate this is as I always use the carat symbol in my calculator.
//   -Ans: This brings up the previously calculated answer as a variable to use in the next expression.
//      For example:
//              Input   |   Output
//               3+2    |     5
//              Ans+3   |     8
//   -e is the natural number, or Euler's constant. It is about 2.718, but search up the constant to be sure.
//      The natural number is used in many applications like the natural logarithm (ln) which in the C++ cmath
//      library is represented by the function log(double).
//   -Inv: will invert the number, like Inv(x) = 1/x and so forth. Just use an inverse symbol if you have one
//      that looks like the -1 exponent.
//   -x!: This will return the factorial of x, which is defined to be the multiplicative sum of x and all integers
//      below x until 1. For example: 5! = 5*4*3*2*1 = 120
//      In expanded form, x! = x*(x-1)*(x-2)*(x-3)*...*1
//      There is a factorial for decimals, but it is really complicated.
//      Look in my factorial files for those functions. Dunno if cmath provides one for regular factoial.
//   -ln: This is the logarithm with base e, the natural logarithm. ln(x) = log(x)/log(e). In C++, ln is represented
//      in the cmath library as log(double). Why the people of ISO decided to use log instead of ln, (which really
//      denotes logarithm with base 10) is beyond me. In case you also do not know what a logarithm is: the logarithm
//      of a number is basically the reverse process of an exponentiation. If 2^6 = 64, then log(2)(64) = 6. Thanks
//      to the relations of exponents, log(2)(64) = log(64)/log(2) = log(3)(64)/log(3)(2) = ... = 6
//      The form of a logarithm is log(b)(a) where b is the base and a is the input. b is usually written as a
//      subscript. As you can tell, I was unable to do that here.

//To do: 1) Square root(s.r), percentage(per), backspace/reset(c) has yet to be implemented.
//       2) Previously mentioned functions pending due to lack of knowledge =(
//       3) Previous answer capability.
//       4) ???

//You should denote square root by something else like "sqrt" as in the cmath library. I kept looking at "s.r"
//   in your code wondering if s was an object.

//Note about your Screen.cpp file: You have a lot of local variables that are the same thing and should be constant.
//  Why not declare them as global constants, so you don't have to copy/paste all of them? If you are really against
//   any kind of global variable, you can wrap them in a separate namespace or something. You can also put them
//   in the Constants.h header file if you want (but wrap them in a namespace if you do put them there.)


Also, sorry about lagging behind. I'll try to clean up my implementations and help you wherever I can.
~Daleth~

______________________________________________________________________________

//For the tan, cos, sin, eg. tan(3) is 0.052408 whereas the Google calc displays -0.1425. Cos and sin are the same, 
//please compare the calc result here and Google's version to see the difference.

Check your settings. You did not calculate the same values. 
   tan(3 [degrees]) = 0.052408 | tan(3 [radians]) = -0.1425
   PI [radians] = 180 [degrees]
   By default all C++ functions in the cmath and math.h libraries use radians.
      And I think our custom functions convert the parameters from degrees to 
      radians before passing them to the standard functions.

//Only things left that hasn't been added is:
//1) Inverse
//2) Power
//3) rad/degree
//4) Ans

//I'll look at finishing up ans, but I'm not keen on bothering with inverse, rad/degree and power(display issues). Can
//we just stop at that and call it a partially completed calc made for consoles (lack of keystrokes and mouse)?

//There's still the list version of the calc to incorporate all the specific matrix/trigo calculations if you want to 
//continue with this. I think it'll be more tedious than educational though, but maybe the list version is different
//in your mind.

Considering how dead the group is, it'll probably be best to just finish your list and call it there.
You may want to copy/paste some of the code we wrote to use as part of a personal library. I'm in the
process of converting my Fraction and Vector files to portable and reusuable code. Of course, if you
incorporate code that you didn't write yourself, please give credit to where it is due. I would do
the same for you guys.


//      You've selected geometry, calculating surface area of circle.
//      
//                     Input first operand.
//               _______________________________                         
//              |_______________________________| 
//              
//                      1     2     3  
//
//                      4     5     6
//
//                      7     8     9
//          
//                      .     ENTER
//
//
//After the user selects the function they will enter this screen where the prog specifically asks for an int/float
//input. Upon entering the number, the result screen wipes and request the second number. After that it spits out the
//result.

//It will be the same for every single function depending on the number of operands they require. That's what I think
//the list version will look like, not sure what you think though.

//And it's fine, sorry I didn't reply on Friday I was already asleep. This is just for practice afterall and nothing
//serious. Olysold.

Why not:

------------------------------
|       Geometry Menu        |
|                            |
| Area                       |
| Volume                     |
| Back                       |
|                            |
------------------------------
And you can have submenus for the categories?

I have the ASCII code of a decent pointer that
I used in a previous project for menus. If you
want, you can use it.

By the way, what do you mean by list version? Do you mean
something similar to the Geometry Menu above?

-------------------------------------------------------------------------------

See embedded replies above.

After this experimental project, would you be interested in 
working on another project together? We can try formulating
a simple project that's building on which subject each of us 
is currently studying. We can also--if you agree to another
project--practice planning out our program. Professional
C++ by Marc Gregoire et. al. gives a couple neat tips on how
to effectively plan out what one is going to do before diving
into the actual programming.

Oh, also I left you some comments in other files.

~Daleth~

